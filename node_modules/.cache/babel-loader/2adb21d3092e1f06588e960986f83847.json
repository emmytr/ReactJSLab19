{"ast":null,"code":"var _jsxFileName = \"/Users/nus/Documents/Study/NU_Funix/React/ASM/Assignment 02_NhaUyen/src/pages/MovieDetail/MovieDetails.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom'; // Import useParams to get movieId from URL and useLocation to retrieve the category from the state object\nimport styles from './movieDetails.module.css';\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\nconst opts = {\n  height: '400',\n  width: '100%',\n  playerVars: {\n    autoplay: 0\n  }\n};\nfunction MovieDetails() {\n  var _location$state, _location$state2;\n  const {\n    movieId\n  } = useParams(); // Get the movieId from the URL\n  const location = useLocation(); // Get location object\n  const category = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.category) || '';\n  const mediaType = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.mediaType) || 'movie'; // Get mediaType from state, default to 'movie'\n  const navigate = useNavigate();\n  const [movie, setMovie] = useState(null); // Store the movie details\n  const [videoKey, setVideoKey] = useState(null); // Store the YouTube video key\n  const [sameGenreMovies, setSameGenreMovies] = useState([]); // Movies from the same genre\n\n  useEffect(() => {\n    // Fetch movie details based on movieId\n    async function fetchMovieDetails() {\n      try {\n        // Use the correct endpoint based on media type\n        const endpoint = mediaType === 'tv' ? `/tv/${movieId}` : `/movie/${movieId}`;\n        const response = await fetch(`${API_BASE_URL}${endpoint}?api_key=${API_KEY}&language=en-US`);\n        const data = await response.json();\n        setMovie(data);\n\n        // Fetch movies from the same genre after getting movie details\n        if (data.genres && data.genres.length > 0) {\n          const genreId = data.genres[0].id; // Use the first genre ID\n          fetchSameGenreMovies(genreId);\n        }\n      } catch (error) {\n        console.error('Error fetching movie/TV show details:', error);\n      }\n    }\n\n    // Fetch movie trailer or teaser\n    async function fetchMovieVideo() {\n      const endpoint = mediaType === 'tv' ? `/tv/${movieId}` : `/movie/${movieId}`;\n      const response = await fetch(`${API_BASE_URL}${endpoint}/videos?api_key=${API_KEY}`);\n      const data = await response.json();\n      const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n      const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n      setVideoKey(trailer ? trailer.key : teaser ? teaser.key : null);\n    }\n\n    // Fetch movies with the same genre\n    async function fetchSameGenreMovies(genreId) {\n      try {\n        const endpoint = mediaType === 'tv' ? `/discover/tv?api_key=${API_KEY}&with_genres=${genreId}&with_network=123` // Netflix Originals by genre\n        : `/discover/movie?api_key=${API_KEY}&with_genres=${genreId}`; // Use the correct endpoint based on mediaType\n        const response = await fetch(`${API_BASE_URL}${endpoint}`);\n        const data = await response.json();\n        setSameGenreMovies(data.results);\n      } catch (error) {\n        console.error('Error fetching same genre movies/TV shows:', error);\n      }\n    }\n    fetchMovieDetails();\n    fetchMovieVideo();\n  }, [movieId]); // Re-run this effect when movieId changes\n\n  // Function to handle movie click from same genre movies\n  const handleMovieClick = clickedMovieId => {\n    if (clickedMovieId === parseInt(movieId)) {\n      // If the same movie is clicked, navigate back to the browse page\n      navigate('/');\n    } else {\n      // If a different movie is clicked, navigate to the new movie detail page\n      navigate(`/movie/${clickedMovieId}`, {\n        state: {\n          category,\n          mediaType\n        }\n      });\n    }\n  };\n  if (!movie) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 24\n    }\n  }, \"Loading...\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, category), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, sameGenreMovies.map(sameGenreMovie => /*#__PURE__*/React.createElement(\"div\", {\n    key: sameGenreMovie.id,\n    className: styles.movieItem,\n    onClick: () => handleMovieClick(sameGenreMovie.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `https://image.tmdb.org/t/p/w200${sameGenreMovie.backdrop_path}`,\n    alt: sameGenreMovie.title || sameGenreMovie.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 29\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieDetails,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }, movie.name || movie.title), /*#__PURE__*/React.createElement(\"hr\", {\n    className: styles.line,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 24\n    }\n  }, \"Release Date:\"), \" \", movie.release_date), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 24\n    }\n  }, \"Rating:\"), \" \", movie.vote_average), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, movie.overview)), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieTrailer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.videoContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }, videoKey ? /*#__PURE__*/React.createElement(YouTube, {\n    videoId: videoKey,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(\"img\", {\n    src: `https://image.tmdb.org/t/p/original${movie.backdrop_path}`,\n    alt: movie.name,\n    className: styles.movieBackdrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    }\n  })))));\n}\nexport default MovieDetails;","map":{"version":3,"names":["React","useState","useEffect","YouTube","useParams","useLocation","useNavigate","styles","API_BASE_URL","API_KEY","opts","height","width","playerVars","autoplay","MovieDetails","_location$state","_location$state2","movieId","location","category","state","mediaType","navigate","movie","setMovie","videoKey","setVideoKey","sameGenreMovies","setSameGenreMovies","fetchMovieDetails","endpoint","response","fetch","data","json","genres","length","genreId","id","fetchSameGenreMovies","error","console","fetchMovieVideo","trailer","results","find","video","site","type","teaser","key","handleMovieClick","clickedMovieId","parseInt","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","group","movieContainer","map","sameGenreMovie","movieItem","onClick","src","backdrop_path","alt","title","name","movieDetails","movieContent","line","release_date","vote_average","overview","movieTrailer","videoContainer","videoId","movieBackdrop"],"sources":["/Users/nus/Documents/Study/NU_Funix/React/ASM/Assignment 02_NhaUyen/src/pages/MovieDetail/MovieDetails.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';  // Import useParams to get movieId from URL and useLocation to retrieve the category from the state object\nimport styles from './movieDetails.module.css';\n\n\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\n\nconst opts = {\n    height: '400',\n    width: '100%',\n    playerVars: {\n        autoplay: 0,\n    },\n};\n\nfunction MovieDetails() {\n    const { movieId } = useParams();  // Get the movieId from the URL\n    const location = useLocation();  // Get location object\n    const category = location.state?.category || '';\n    const mediaType = location.state?.mediaType || 'movie' // Get mediaType from state, default to 'movie'\n    const navigate = useNavigate()\n    const [movie, setMovie] = useState(null);  // Store the movie details\n    const [videoKey, setVideoKey] = useState(null);  // Store the YouTube video key\n    const [sameGenreMovies, setSameGenreMovies] = useState([]);  // Movies from the same genre\n\n    useEffect(() => {\n        // Fetch movie details based on movieId\n        async function fetchMovieDetails() {\n            try {\n                // Use the correct endpoint based on media type\n                const endpoint = mediaType === 'tv' ? `/tv/${movieId}` : `/movie/${movieId}`;\n                const response = await fetch(`${API_BASE_URL}${endpoint}?api_key=${API_KEY}&language=en-US`);\n                const data = await response.json();\n                setMovie(data);\n\n                // Fetch movies from the same genre after getting movie details\n                if (data.genres && data.genres.length > 0) {\n                    const genreId = data.genres[0].id;  // Use the first genre ID\n                    fetchSameGenreMovies(genreId);\n                }\n            } catch (error) {\n                console.error('Error fetching movie/TV show details:', error);\n            }\n        }\n\n\n        // Fetch movie trailer or teaser\n        async function fetchMovieVideo() {\n            const endpoint = mediaType === 'tv' ? `/tv/${movieId}` : `/movie/${movieId}`;\n            const response = await fetch(`${API_BASE_URL}${endpoint}/videos?api_key=${API_KEY}`);\n            const data = await response.json();\n            const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n            const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n            setVideoKey(trailer ? trailer.key : teaser ? teaser.key : null);\n        }\n\n        // Fetch movies with the same genre\n        async function fetchSameGenreMovies(genreId) {\n            try {\n                const endpoint = mediaType === 'tv'\n                    ? `/discover/tv?api_key=${API_KEY}&with_genres=${genreId}&with_network=123`  // Netflix Originals by genre\n                    : `/discover/movie?api_key=${API_KEY}&with_genres=${genreId}`;  // Use the correct endpoint based on mediaType\n                const response = await fetch(`${API_BASE_URL}${endpoint}`);\n                const data = await response.json();\n                setSameGenreMovies(data.results);\n            } catch (error) {\n                console.error('Error fetching same genre movies/TV shows:', error);\n            }\n        }\n\n        fetchMovieDetails();\n        fetchMovieVideo();\n    }, [movieId]);  // Re-run this effect when movieId changes\n\n    // Function to handle movie click from same genre movies\n    const handleMovieClick = (clickedMovieId) => {\n        if (clickedMovieId === parseInt(movieId)) {\n            // If the same movie is clicked, navigate back to the browse page\n            navigate('/');\n        } else {\n            // If a different movie is clicked, navigate to the new movie detail page\n            navigate(`/movie/${clickedMovieId}`, { state: { category, mediaType } });\n        }\n    };\n\n    if (!movie) return <div>Loading...</div>;\n\n    return (\n        <div>\n            {/* Same Genre Movies */}\n            <div className={styles.group}>\n                <h2>{category}</h2>\n                <div className={styles.movieContainer}>\n                    {sameGenreMovies.map(sameGenreMovie => (\n                        <div key={sameGenreMovie.id} className={styles.movieItem}\n                            onClick={() => handleMovieClick(sameGenreMovie.id)}>\n                            {/* Handle movie click */}\n                            <img\n                                src={`https://image.tmdb.org/t/p/w200${sameGenreMovie.backdrop_path}`}\n                                alt={sameGenreMovie.title || sameGenreMovie.name}\n                            />\n                        </div>\n                    ))}\n                </div>\n            </div>\n\n            <div className={styles.movieDetails}>\n                <div className={styles.movieContent}>\n                    <h2>{movie.name || movie.title}</h2>\n                    <hr className={styles.line} />\n                    <p><strong>Release Date:</strong> {movie.release_date}</p>\n                    <p><strong>Rating:</strong> {movie.vote_average}</p>\n                    <p>{movie.overview}</p>\n                </div>\n\n                {/* Placeholder for the trailer */}\n                <div className={styles.movieTrailer}>\n                    <div className={styles.videoContainer}>\n                        {videoKey ? (\n                            <YouTube videoId={videoKey} opts={opts} />\n                        ) : (\n                            <img\n                                src={`https://image.tmdb.org/t/p/original${movie.backdrop_path}`}\n                                alt={movie.name}\n                                className={styles.movieBackdrop}\n                            />\n                        )}\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default MovieDetails;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}