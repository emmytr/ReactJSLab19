{"ast":null,"code":"var _jsxFileName = \"/Users/nus/Documents/Study/NU_Funix/React/ASM/Assignment 02 (Starter Code)/src/pages/MovieDetail/MovieList.jsx\";\n// import React, { useEffect, useState } from 'react';\n// import styles from './movieList.module.css'; // Import the CSS file\n\n// const API_BASE_URL = 'https://api.themoviedb.org/3';\n\n// function MovieList({ category, fetchUrl, isOriginals, onClick }) {\n//     const [movies, setMovies] = useState([])\n\n//     // Fetch movies based on the provided fetchUrl\n//     useEffect(() => {\n//         async function fetchData() {\n//             const response = await fetch(`${API_BASE_URL}${fetchUrl}`);\n//             const data = await response.json();\n//             setMovies(data.results);\n//         }\n//         fetchData();\n//     }, [fetchUrl]);\n\n//     return (\n//         <div className={styles.group}>\n//             <h2>{category}</h2>\n//             <div className={styles.movieContainer}>\n//                 {movies.map((movie) => (\n//                     <div\n//                         key={movie.id}\n//                         className={`${styles.movieItem} ${isOriginals ? styles.netflixOriginals : styles.otherGenres}`}\n//                         onClick={() => onClick(movie, movies)}  // Pass the movie click event to parent\n//                     >\n//                         {/* Conditional rendering: show poster for Netflix Originals, backdrop for other genres */}\n//                         <img\n//                             src={`https://image.tmdb.org/t/p/w500${isOriginals ? movie.poster_path : movie.backdrop_path}`}\n//                             alt={movie.title}\n//                             className={styles.movieImage}\n//                         />\n//                     </div>\n//                 ))}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default MovieList;\n\nimport React, { useEffect, useState } from 'react';\nimport YouTube from 'react-youtube'; // Import YouTube component for video\nimport styles from './movieList.module.css'; // Import the CSS file\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e'; // Replace with your API key\n\nfunction MovieList({\n  category,\n  fetchUrl,\n  isOriginals,\n  onClick\n}) {\n  const [movies, setMovies] = useState([]);\n\n  // Fetch movies based on the provided fetchUrl\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(`${API_BASE_URL}${fetchUrl}`);\n      const data = await response.json();\n      setMovies(data.results);\n    }\n    fetchData();\n  }, [fetchUrl]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, category), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(MovieItem, {\n    key: movie.id,\n    movie: movie,\n    isOriginals: isOriginals,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }))));\n}\n\n// Component for each movie item, fetching the trailer or teaser video\nfunction MovieItem({\n  movie,\n  isOriginals\n}) {\n  const [videoKey, setVideoKey] = useState(null); // Store the YouTube video key\n\n  useEffect(() => {\n    // Fetch movie videos from TMDb API\n    async function fetchVideo() {\n      try {\n        const response = await fetch(`${API_BASE_URL}/movie/${movie.id}/videos?api_key=${API_KEY}`);\n        const data = await response.json();\n\n        // Prefer \"Trailer\" over \"Teaser\"\n        const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n        const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n        if (trailer) {\n          setVideoKey(trailer.key);\n        } else if (teaser) {\n          setVideoKey(teaser.key);\n        }\n      } catch (error) {\n        console.error('Error fetching movie videos:', error);\n      }\n    }\n    fetchVideo();\n  }, [movie.id]);\n\n  // YouTube player configuration\n  const opts = {\n    height: '400',\n    width: '100%',\n    playerVars: {\n      autoplay: 0\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `${styles.movieItem} ${isOriginals ? styles.netflixOriginals : styles.otherGenres}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, videoKey ? /*#__PURE__*/React.createElement(YouTube, {\n    videoId: videoKey,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(\"img\", {\n    src: `https://image.tmdb.org/t/p/w500${isOriginals ? movie.poster_path : movie.backdrop_path}`,\n    alt: movie.title || movie.name,\n    className: styles.movieImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }));\n}\nexport default MovieList;","map":{"version":3,"names":["React","useEffect","useState","YouTube","styles","API_BASE_URL","API_KEY","MovieList","category","fetchUrl","isOriginals","onClick","movies","setMovies","fetchData","response","fetch","data","json","results","createElement","className","group","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","movieContainer","map","movie","MovieItem","key","id","videoKey","setVideoKey","fetchVideo","trailer","find","video","site","type","teaser","error","console","opts","height","width","playerVars","autoplay","movieItem","netflixOriginals","otherGenres","videoId","src","poster_path","backdrop_path","alt","title","name","movieImage"],"sources":["/Users/nus/Documents/Study/NU_Funix/React/ASM/Assignment 02 (Starter Code)/src/pages/MovieDetail/MovieList.jsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import styles from './movieList.module.css'; // Import the CSS file\n\n// const API_BASE_URL = 'https://api.themoviedb.org/3';\n\n// function MovieList({ category, fetchUrl, isOriginals, onClick }) {\n//     const [movies, setMovies] = useState([])\n\n//     // Fetch movies based on the provided fetchUrl\n//     useEffect(() => {\n//         async function fetchData() {\n//             const response = await fetch(`${API_BASE_URL}${fetchUrl}`);\n//             const data = await response.json();\n//             setMovies(data.results);\n//         }\n//         fetchData();\n//     }, [fetchUrl]);\n\n\n//     return (\n//         <div className={styles.group}>\n//             <h2>{category}</h2>\n//             <div className={styles.movieContainer}>\n//                 {movies.map((movie) => (\n//                     <div\n//                         key={movie.id}\n//                         className={`${styles.movieItem} ${isOriginals ? styles.netflixOriginals : styles.otherGenres}`}\n//                         onClick={() => onClick(movie, movies)}  // Pass the movie click event to parent\n//                     >\n//                         {/* Conditional rendering: show poster for Netflix Originals, backdrop for other genres */}\n//                         <img\n//                             src={`https://image.tmdb.org/t/p/w500${isOriginals ? movie.poster_path : movie.backdrop_path}`}\n//                             alt={movie.title}\n//                             className={styles.movieImage}\n//                         />\n//                     </div>\n//                 ))}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default MovieList;\n\n\n\nimport React, { useEffect, useState } from 'react';\nimport YouTube from 'react-youtube'; // Import YouTube component for video\nimport styles from './movieList.module.css'; // Import the CSS file\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e'; // Replace with your API key\n\nfunction MovieList({ category, fetchUrl, isOriginals, onClick }) {\n    const [movies, setMovies] = useState([]);\n\n    // Fetch movies based on the provided fetchUrl\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch(`${API_BASE_URL}${fetchUrl}`);\n            const data = await response.json();\n            setMovies(data.results);\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    return (\n        <div className={styles.group}>\n            <h2>{category}</h2>\n            <div className={styles.movieContainer}>\n                {movies.map((movie) => (\n                    <MovieItem\n                        key={movie.id}\n                        movie={movie}\n                        isOriginals={isOriginals}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\n// Component for each movie item, fetching the trailer or teaser video\nfunction MovieItem({ movie, isOriginals }) {\n    const [videoKey, setVideoKey] = useState(null); // Store the YouTube video key\n\n    useEffect(() => {\n        // Fetch movie videos from TMDb API\n        async function fetchVideo() {\n            try {\n                const response = await fetch(`${API_BASE_URL}/movie/${movie.id}/videos?api_key=${API_KEY}`);\n                const data = await response.json();\n\n                // Prefer \"Trailer\" over \"Teaser\"\n                const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n                const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n\n                if (trailer) {\n                    setVideoKey(trailer.key);\n                } else if (teaser) {\n                    setVideoKey(teaser.key);\n                }\n            } catch (error) {\n                console.error('Error fetching movie videos:', error);\n            }\n        }\n\n        fetchVideo();\n    }, [movie.id]);\n\n    // YouTube player configuration\n    const opts = {\n        height: '400',\n        width: '100%',\n        playerVars: {\n            autoplay: 0,\n        },\n    };\n\n    return (\n        <div className={`${styles.movieItem} ${isOriginals ? styles.netflixOriginals : styles.otherGenres}`}>\n            {/* Render YouTube video if available, else render the backdrop image */}\n            {videoKey ? (\n                <YouTube videoId={videoKey} opts={opts} />\n            ) : (\n                <img\n                    src={`https://image.tmdb.org/t/p/w500${isOriginals ? movie.poster_path : movie.backdrop_path}`}\n                    alt={movie.title || movie.name}\n                    className={styles.movieImage}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default MovieList;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}