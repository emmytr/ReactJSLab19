{"ast":null,"code":"var _jsxFileName = \"/Users/nus/Documents/Study/NU_Funix/React/ASM/Assignment 02 (Starter Code)/src/pages/MovieDetail/MovieDetails.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport { useParams } from 'react-router-dom'; // Import useParams to get movieId from URL\nimport styles from './movieDetails.module.css';\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\nconst opts = {\n  height: '400',\n  width: '100%',\n  playerVars: {\n    autoplay: 0\n  }\n};\nfunction MovieDetails() {\n  const {\n    movieId\n  } = useParams(); // Get the movieId from the URL\n  const [movie, setMovie] = useState(null); // Store the movie details\n  const [videoKey, setVideoKey] = useState(null); // Store the YouTube video key\n  const [sameGenreMovies, setSameGenreMovies] = useState([]); // Movies from the same genre\n\n  useEffect(() => {\n    // Fetch movie details based on movieId\n    async function fetchMovieDetails() {\n      const response = await fetch(`${API_BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n      const data = await response.json();\n      setMovie(data);\n\n      // Fetch movies from the same genre after getting movie details\n      if (data.genres && data.genres.length > 0) {\n        const genreId = data.genres[0].id; // Use the first genre ID\n        fetchSameGenreMovies(genreId);\n      }\n    }\n\n    // Fetch movie trailer or teaser\n    async function fetchMovieVideo() {\n      const response = await fetch(`${API_BASE_URL}/movie/${movieId}/videos?api_key=${API_KEY}`);\n      const data = await response.json();\n      const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n      const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n      setVideoKey(trailer ? trailer.key : teaser ? teaser.key : null);\n    }\n\n    // Fetch movies with the same genre\n    async function fetchSameGenreMovies(genreId) {\n      const response = await fetch(`${API_BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${genreId}`);\n      const data = await response.json();\n      setSameGenreMovies(data.results);\n    }\n    fetchMovieDetails();\n    fetchMovieVideo();\n  }, [movieId]); // Re-run this effect when movieId changes\n\n  if (!movie) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 24\n    }\n  }, \"Loading...\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieDetails,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, movie.name || movie.title), /*#__PURE__*/React.createElement(\"hr\", {\n    className: styles.line,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 20\n    }\n  }, \"Release Date:\"), \" \", movie.release_date), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 20\n    }\n  }, \"Rating:\"), \" \", movie.vote_average), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, movie.overview)), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieTrailer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.videoContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, videoKey ? /*#__PURE__*/React.createElement(YouTube, {\n    videoId: videoKey,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(\"img\", {\n    src: `https://image.tmdb.org/t/p/original${movie.backdrop_path}`,\n    alt: movie.name,\n    className: styles.movieBackdrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.sameGenreSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.sameGenreMovies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, sameGenreMovies.map(sameGenreMovie => /*#__PURE__*/React.createElement(\"div\", {\n    key: sameGenreMovie.id,\n    className: styles.sameGenreMovieItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: `https://image.tmdb.org/t/p/w200${sameGenreMovie.poster_path}`,\n    alt: sameGenreMovie.title || sameGenreMovie.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }\n  }, sameGenreMovie.title || sameGenreMovie.name))))));\n}\nexport default MovieDetails;\n/*#__PURE__*/React.createElement(\"div\", {\n  className: styles.movieContainer,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 1\n  }\n}, movies.map(movie => /*#__PURE__*/React.createElement(\"div\", {\n  key: movie.id,\n  className: `${styles.movieItem} ${isOriginals ? styles.netflixOriginals : styles.otherGenres}`,\n  onClick: () => handleMovieClick(movie.id) // Navigate on click\n  ,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"img\", {\n  src: `https://image.tmdb.org/t/p/w500${isOriginals ? movie.poster_path : movie.backdrop_path}`,\n  alt: movie.name,\n  className: styles.movieImage,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 13\n  }\n}))));","map":{"version":3,"names":["React","useState","useEffect","YouTube","useParams","styles","API_BASE_URL","API_KEY","opts","height","width","playerVars","autoplay","MovieDetails","movieId","movie","setMovie","videoKey","setVideoKey","sameGenreMovies","setSameGenreMovies","fetchMovieDetails","response","fetch","data","json","genres","length","genreId","id","fetchSameGenreMovies","fetchMovieVideo","trailer","results","find","video","site","type","teaser","key","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","movieDetails","movieContent","name","title","line","release_date","vote_average","overview","movieTrailer","videoContainer","videoId","src","backdrop_path","alt","movieBackdrop","sameGenreSection","map","sameGenreMovie","sameGenreMovieItem","poster_path","movieContainer","movies","movieItem","isOriginals","netflixOriginals","otherGenres","onClick","handleMovieClick","movieImage"],"sources":["/Users/nus/Documents/Study/NU_Funix/React/ASM/Assignment 02 (Starter Code)/src/pages/MovieDetail/MovieDetails.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport { useParams } from 'react-router-dom';  // Import useParams to get movieId from URL\nimport styles from './movieDetails.module.css';\n\n\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\n\nconst opts = {\n    height: '400',\n    width: '100%',\n    playerVars: {\n        autoplay: 0,\n    },\n};\n\nfunction MovieDetails() {\n    const { movieId } = useParams();  // Get the movieId from the URL\n    const [movie, setMovie] = useState(null);  // Store the movie details\n    const [videoKey, setVideoKey] = useState(null);  // Store the YouTube video key\n    const [sameGenreMovies, setSameGenreMovies] = useState([]);  // Movies from the same genre\n\n    useEffect(() => {\n        // Fetch movie details based on movieId\n        async function fetchMovieDetails() {\n            const response = await fetch(`${API_BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n            const data = await response.json();\n            setMovie(data);\n\n            // Fetch movies from the same genre after getting movie details\n            if (data.genres && data.genres.length > 0) {\n                const genreId = data.genres[0].id;  // Use the first genre ID\n                fetchSameGenreMovies(genreId);\n            }\n        }\n\n\n        // Fetch movie trailer or teaser\n        async function fetchMovieVideo() {\n            const response = await fetch(`${API_BASE_URL}/movie/${movieId}/videos?api_key=${API_KEY}`);\n            const data = await response.json();\n            const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n            const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n            setVideoKey(trailer ? trailer.key : teaser ? teaser.key : null);\n        }\n\n        // Fetch movies with the same genre\n        async function fetchSameGenreMovies(genreId) {\n            const response = await fetch(`${API_BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${genreId}`);\n            const data = await response.json();\n            setSameGenreMovies(data.results);\n        }\n\n        fetchMovieDetails();\n        fetchMovieVideo();\n    }, [movieId]);  // Re-run this effect when movieId changes\n\n    if (!movie) return <div>Loading...</div>;\n\n    return (\n        <div className={styles.movieDetails}>\n            <div className={styles.movieContent}>\n                <h2>{movie.name || movie.title}</h2>\n                <hr className={styles.line} />\n                <p><strong>Release Date:</strong> {movie.release_date}</p>\n                <p><strong>Rating:</strong> {movie.vote_average}</p>\n                <p>{movie.overview}</p>\n            </div>\n\n            {/* Placeholder for the trailer */}\n            <div className={styles.movieTrailer}>\n                <div className={styles.videoContainer}>\n                    {videoKey ? (\n                        <YouTube videoId={videoKey} opts={opts} />\n                    ) : (\n                        <img\n                            src={`https://image.tmdb.org/t/p/original${movie.backdrop_path}`}\n                            alt={movie.name}\n                            className={styles.movieBackdrop}\n                        />\n                    )}\n                </div>\n            </div>\n\n\n            {/* Same Genre Movies */}\n            <div className={styles.sameGenreSection}>\n                <div className={styles.sameGenreMovies}>\n                    {sameGenreMovies.map(sameGenreMovie => (\n                        <div key={sameGenreMovie.id} className={styles.sameGenreMovieItem}>\n                            <img\n                                src={`https://image.tmdb.org/t/p/w200${sameGenreMovie.poster_path}`}\n                                alt={sameGenreMovie.title || sameGenreMovie.name}\n                            />\n                            <p>{sameGenreMovie.title || sameGenreMovie.name}</p>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieDetails;\n\n\n<div className={styles.movieContainer}>\n    {movies.map((movie) => (\n        <div\n            key={movie.id}\n            className={`${styles.movieItem} ${isOriginals ? styles.netflixOriginals : styles.otherGenres}`}\n            onClick={() => handleMovieClick(movie.id)}  // Navigate on click\n        >\n            {/* Conditional rendering: show poster for Netflix Originals, backdrop for other genres */}\n            <img\n                src={`https://image.tmdb.org/t/p/w500${isOriginals ? movie.poster_path : movie.backdrop_path}`}\n                alt={movie.name}\n                className={styles.movieImage}\n            />\n\n        </div>\n    ))}\n</div>"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,eAAe;AACnC,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAE;AAC/C,OAAOC,MAAM,MAAM,2BAA2B;AAI9C,MAAMC,YAAY,GAAG,8BAA8B;AACnD,MAAMC,OAAO,GAAG,kCAAkC;AAElD,MAAMC,IAAI,GAAG;EACTC,MAAM,EAAE,KAAK;EACbC,KAAK,EAAE,MAAM;EACbC,UAAU,EAAE;IACRC,QAAQ,EAAE;EACd;AACJ,CAAC;AAED,SAASC,YAAYA,CAAA,EAAG;EACpB,MAAM;IAAEC;EAAQ,CAAC,GAAGV,SAAS,CAAC,CAAC,CAAC,CAAE;EAClC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EAC3C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EACjD,MAAM,CAACkB,eAAe,EAAEC,kBAAkB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAE7DC,SAAS,CAAC,MAAM;IACZ;IACA,eAAemB,iBAAiBA,CAAA,EAAG;MAC/B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,YAAY,UAAUQ,OAAO,YAAYP,OAAO,iBAAiB,CAAC;MAClG,MAAMiB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCT,QAAQ,CAACQ,IAAI,CAAC;;MAEd;MACA,IAAIA,IAAI,CAACE,MAAM,IAAIF,IAAI,CAACE,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;QACvC,MAAMC,OAAO,GAAGJ,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACG,EAAE,CAAC,CAAE;QACpCC,oBAAoB,CAACF,OAAO,CAAC;MACjC;IACJ;;IAGA;IACA,eAAeG,eAAeA,CAAA,EAAG;MAC7B,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,YAAY,UAAUQ,OAAO,mBAAmBP,OAAO,EAAE,CAAC;MAC1F,MAAMiB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,MAAMO,OAAO,GAAGR,IAAI,CAACS,OAAO,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,KAAK,SAAS,IAAID,KAAK,CAACE,IAAI,KAAK,SAAS,CAAC;MAChG,MAAMC,MAAM,GAAGd,IAAI,CAACS,OAAO,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,KAAK,SAAS,IAAID,KAAK,CAACE,IAAI,KAAK,QAAQ,CAAC;MAC9FnB,WAAW,CAACc,OAAO,GAAGA,OAAO,CAACO,GAAG,GAAGD,MAAM,GAAGA,MAAM,CAACC,GAAG,GAAG,IAAI,CAAC;IACnE;;IAEA;IACA,eAAeT,oBAAoBA,CAACF,OAAO,EAAE;MACzC,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGjB,YAAY,2BAA2BC,OAAO,gBAAgBqB,OAAO,EAAE,CAAC;MACxG,MAAMJ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCL,kBAAkB,CAACI,IAAI,CAACS,OAAO,CAAC;IACpC;IAEAZ,iBAAiB,CAAC,CAAC;IACnBU,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,CAACjB,OAAO,CAAC,CAAC,CAAC,CAAE;;EAEhB,IAAI,CAACC,KAAK,EAAE,oBAAOf,KAAA,CAAAwC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK,YAAe,CAAC;EAExC,oBACI9C,KAAA,CAAAwC,aAAA;IAAKO,SAAS,EAAE1C,MAAM,CAAC2C,YAAa;IAAAP,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAChC9C,KAAA,CAAAwC,aAAA;IAAKO,SAAS,EAAE1C,MAAM,CAAC4C,YAAa;IAAAR,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAChC9C,KAAA,CAAAwC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAK/B,KAAK,CAACmC,IAAI,IAAInC,KAAK,CAACoC,KAAU,CAAC,eACpCnD,KAAA,CAAAwC,aAAA;IAAIO,SAAS,EAAE1C,MAAM,CAAC+C,IAAK;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eAC9B9C,KAAA,CAAAwC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAAG9C,KAAA,CAAAwC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAQ,eAAqB,CAAC,KAAC,EAAC/B,KAAK,CAACsC,YAAgB,CAAC,eAC1DrD,KAAA,CAAAwC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAAG9C,KAAA,CAAAwC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAQ,SAAe,CAAC,KAAC,EAAC/B,KAAK,CAACuC,YAAgB,CAAC,eACpDtD,KAAA,CAAAwC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI/B,KAAK,CAACwC,QAAY,CACrB,CAAC,eAGNvD,KAAA,CAAAwC,aAAA;IAAKO,SAAS,EAAE1C,MAAM,CAACmD,YAAa;IAAAf,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAChC9C,KAAA,CAAAwC,aAAA;IAAKO,SAAS,EAAE1C,MAAM,CAACoD,cAAe;IAAAhB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACjC7B,QAAQ,gBACLjB,KAAA,CAAAwC,aAAA,CAACrC,OAAO;IAACuD,OAAO,EAAEzC,QAAS;IAACT,IAAI,EAAEA,IAAK;IAAAiC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,gBAE1C9C,KAAA,CAAAwC,aAAA;IACImB,GAAG,EAAE,sCAAsC5C,KAAK,CAAC6C,aAAa,EAAG;IACjEC,GAAG,EAAE9C,KAAK,CAACmC,IAAK;IAChBH,SAAS,EAAE1C,MAAM,CAACyD,aAAc;IAAArB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACnC,CAEJ,CACJ,CAAC,eAIN9C,KAAA,CAAAwC,aAAA;IAAKO,SAAS,EAAE1C,MAAM,CAAC0D,gBAAiB;IAAAtB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACpC9C,KAAA,CAAAwC,aAAA;IAAKO,SAAS,EAAE1C,MAAM,CAACc,eAAgB;IAAAsB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAClC3B,eAAe,CAAC6C,GAAG,CAACC,cAAc,iBAC/BjE,KAAA,CAAAwC,aAAA;IAAKD,GAAG,EAAE0B,cAAc,CAACpC,EAAG;IAACkB,SAAS,EAAE1C,MAAM,CAAC6D,kBAAmB;IAAAzB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC9D9C,KAAA,CAAAwC,aAAA;IACImB,GAAG,EAAE,kCAAkCM,cAAc,CAACE,WAAW,EAAG;IACpEN,GAAG,EAAEI,cAAc,CAACd,KAAK,IAAIc,cAAc,CAACf,IAAK;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACpD,CAAC,eACF9C,KAAA,CAAAwC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAImB,cAAc,CAACd,KAAK,IAAIc,cAAc,CAACf,IAAQ,CAClD,CACR,CACA,CACJ,CACJ,CAAC;AAEd;AAEA,eAAerC,YAAY;AAG3B,aAAAb,KAAA,CAAAwC,aAAA;EAAKO,SAAS,EAAE1C,MAAM,CAAC+D,cAAe;EAAA3B,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,GACjCuB,MAAM,CAACL,GAAG,CAAEjD,KAAK,iBACdf,KAAA,CAAAwC,aAAA;EACID,GAAG,EAAExB,KAAK,CAACc,EAAG;EACdkB,SAAS,EAAE,GAAG1C,MAAM,CAACiE,SAAS,IAAIC,WAAW,GAAGlE,MAAM,CAACmE,gBAAgB,GAAGnE,MAAM,CAACoE,WAAW,EAAG;EAC/FC,OAAO,EAAEA,CAAA,KAAMC,gBAAgB,CAAC5D,KAAK,CAACc,EAAE,CAAE,CAAE;EAAA;EAAAY,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,gBAG5C9C,KAAA,CAAAwC,aAAA;EACImB,GAAG,EAAE,kCAAkCY,WAAW,GAAGxD,KAAK,CAACoD,WAAW,GAAGpD,KAAK,CAAC6C,aAAa,EAAG;EAC/FC,GAAG,EAAE9C,KAAK,CAACmC,IAAK;EAChBH,SAAS,EAAE1C,MAAM,CAACuE,UAAW;EAAAnC,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,CAChC,CAEA,CACR,CACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}