{"ast":null,"code":"var _jsxFileName = \"/Users/nus/Documents/Study/NU_Funix/React/ASM/Assignment 02 (Starter Code)/src/Movie.jsx\";\nimport React, { useState } from 'react';\nimport styles from './movie.module.css'; // Import the CSS file\nimport MovieList from './pages/MovieDetail/MovieList';\n\n// Base URL for all API requests\n// const API_BASE_URL = 'https://api.themoviedb.org/3';\n\n// API key\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n  fetchSearch: `/search/movie?api_key=${API_KEY}&language=en-US`\n};\nfunction Movie() {\n  const [selectedMovie, setSelectedMovie] = useState(null); // Track the selected movie\n  const [sameGenreMovies, setSameGenreMovies] = useState([]); // Movies in the same genre as the selected movie\n  const [isMovieSelected, setIsMovieSelected] = useState(false); // If a movie is selected\n  const [videoKey, setVideoKey] = useState(null);\n\n  // Function to fetch the trailer or teaser video\n  useEffect(() => {\n    if (selectedMovie) {\n      async function fetchVideo() {\n        try {\n          const response = await fetch(`${API_BASE_URL}/movie/${selectedMovie.id}/videos?api_key=${API_KEY}`);\n          const data = await response.json();\n\n          // Prefer \"Trailer\" over \"Teaser\"\n          const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n          const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n          if (trailer) {\n            setVideoKey(trailer.key);\n          } else if (teaser) {\n            setVideoKey(teaser.key);\n          } else {\n            setVideoKey(null); // No video available\n          }\n        } catch (error) {\n          console.error('Error fetching video:', error);\n        }\n      }\n      fetchVideo();\n    }\n  }, [selectedMovie]);\n\n  // YouTube player configuration\n  const opts = {\n    height: '400',\n    width: '100%',\n    playerVars: {\n      autoplay: 0\n    }\n  };\n\n  // Function to handle when a movie is clicked\n  const handleMovieClick = (movie, moviesFromSameUrl) => {\n    if (selectedMovie && selectedMovie.id === movie.id) {\n      // Deselect the movie\n      setSelectedMovie(null);\n      setIsMovieSelected(false);\n    } else {\n      // Select the movie and filter same genre movies\n      setSelectedMovie(movie);\n      setIsMovieSelected(true);\n      setSameGenreMovies(moviesFromSameUrl);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, isMovieSelected ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.sameGenreMovies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \"Movies in the Same Genre\"), /*#__PURE__*/React.createElement(MovieList, {\n    movies: sameGenreMovies,\n    onClick: handleMovieClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  })), selectedMovie && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieDetails,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, selectedMovie.title || selectedMovie.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 18\n    }\n  }, \"Release Date:\"), \" \", selectedMovie.first_air_date || selectedMovie.first_air_date), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 18\n    }\n  }, \"Rating:\"), \" \", selectedMovie.vote_average, \"/10\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 18\n    }\n  }, \"Overview:\"), \" \", selectedMovie.overview))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MovieList, {\n    category: \"\",\n    fetchUrl: requests.fetchNetflixOriginals,\n    isOriginals: true,\n    onClick: handleMovieClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MovieList, {\n    category: \"Xu h\\u01B0\\u1EDBng\",\n    fetchUrl: requests.fetchTrending,\n    isOriginals: false,\n    onClick: handleMovieClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MovieList, {\n    category: \"X\\u1EBFp h\\u1EA1ng cao\",\n    fetchUrl: requests.fetchTopRated,\n    isOriginals: false,\n    onClick: handleMovieClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MovieList, {\n    category: \"H\\xE0nh \\u0111\\u1ED9ng\",\n    fetchUrl: requests.fetchActionMovies,\n    isOriginals: false,\n    onClick: handleMovieClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MovieList, {\n    category: \"H\\xE0i\",\n    fetchUrl: requests.fetchComedyMovies,\n    isOriginals: false,\n    onClick: handleMovieClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MovieList, {\n    category: \"Kinh d\\u1ECB\",\n    fetchUrl: requests.fetchHorrorMovies,\n    isOriginals: false,\n    onClick: handleMovieClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MovieList, {\n    category: \"L\\xE3ng m\\u1EA1n\",\n    fetchUrl: requests.fetchRomanceMovies,\n    isOriginals: false,\n    onClick: handleMovieClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MovieList, {\n    category: \"T\\xE0i li\\u1EC7u\",\n    fetchUrl: requests.fetchDocumentaries,\n    isOriginals: false,\n    onClick: handleMovieClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })));\n}\nexport default Movie;","map":{"version":3,"names":["React","useState","styles","MovieList","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","fetchSearch","Movie","selectedMovie","setSelectedMovie","sameGenreMovies","setSameGenreMovies","isMovieSelected","setIsMovieSelected","videoKey","setVideoKey","useEffect","fetchVideo","response","fetch","API_BASE_URL","id","data","json","trailer","results","find","video","site","type","teaser","key","error","console","opts","height","width","playerVars","autoplay","handleMovieClick","movie","moviesFromSameUrl","createElement","className","group","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","movies","onClick","movieDetails","title","name","first_air_date","vote_average","overview","category","fetchUrl","isOriginals"],"sources":["/Users/nus/Documents/Study/NU_Funix/React/ASM/Assignment 02 (Starter Code)/src/Movie.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styles from './movie.module.css';  // Import the CSS file\nimport MovieList from './pages/MovieDetail/MovieList';\n\n// Base URL for all API requests\n// const API_BASE_URL = 'https://api.themoviedb.org/3';\n\n// API key\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n  fetchSearch: `/search/movie?api_key=${API_KEY}&language=en-US`\n};\n\n\nfunction Movie() {\n  const [selectedMovie, setSelectedMovie] = useState(null);   // Track the selected movie\n  const [sameGenreMovies, setSameGenreMovies] = useState([]); // Movies in the same genre as the selected movie\n  const [isMovieSelected, setIsMovieSelected] = useState(false); // If a movie is selected\n  const [videoKey, setVideoKey] = useState(null);\n\n  // Function to fetch the trailer or teaser video\n  useEffect(() => {\n    if (selectedMovie) {\n      async function fetchVideo() {\n        try {\n          const response = await fetch(`${API_BASE_URL}/movie/${selectedMovie.id}/videos?api_key=${API_KEY}`);\n          const data = await response.json();\n\n          // Prefer \"Trailer\" over \"Teaser\"\n          const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n          const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n\n          if (trailer) {\n            setVideoKey(trailer.key);\n          } else if (teaser) {\n            setVideoKey(teaser.key);\n          } else {\n            setVideoKey(null); // No video available\n          }\n        } catch (error) {\n          console.error('Error fetching video:', error);\n        }\n      }\n\n      fetchVideo();\n    }\n  }, [selectedMovie]);\n\n  // YouTube player configuration\n  const opts = {\n    height: '400',\n    width: '100%',\n    playerVars: {\n      autoplay: 0,\n    },\n  };\n\n\n  // Function to handle when a movie is clicked\n  const handleMovieClick = (movie, moviesFromSameUrl) => {\n    if (selectedMovie && selectedMovie.id === movie.id) {\n      // Deselect the movie\n      setSelectedMovie(null);\n      setIsMovieSelected(false);\n    } else {\n      // Select the movie and filter same genre movies\n      setSelectedMovie(movie);\n      setIsMovieSelected(true);\n      setSameGenreMovies(moviesFromSameUrl);\n    }\n  }\n\n  return (\n\n    <div className={styles.group}>\n      {isMovieSelected ? (\n        <>\n          {/* Display same genre movies and movie details */}\n          <div className={styles.sameGenreMovies}>\n            <h2>Movies in the Same Genre</h2>\n            <MovieList\n              movies={sameGenreMovies}\n              onClick={handleMovieClick}\n            />\n          </div>\n\n          {/* Display selected movie details */}\n          {selectedMovie && (\n            <div className={styles.movieDetails}>\n              <h2>{selectedMovie.title || selectedMovie.name}</h2>\n              <p><strong>Release Date:</strong> {selectedMovie.first_air_date || selectedMovie.first_air_date}</p>\n              <p><strong>Rating:</strong> {selectedMovie.vote_average}/10</p>\n              <p><strong>Overview:</strong> {selectedMovie.overview}</p>\n            </div>\n          )}\n        </>\n      ) : (\n        <>\n          {/* Render MovieLists for different categories */}\n          <MovieList category=\"\" fetchUrl={requests.fetchNetflixOriginals} isOriginals={true} onClick={handleMovieClick} />\n          <MovieList category=\"Xu hướng\" fetchUrl={requests.fetchTrending} isOriginals={false} onClick={handleMovieClick} />\n          <MovieList category=\"Xếp hạng cao\" fetchUrl={requests.fetchTopRated} isOriginals={false} onClick={handleMovieClick} />\n          <MovieList category=\"Hành động\" fetchUrl={requests.fetchActionMovies} isOriginals={false} onClick={handleMovieClick} />\n          <MovieList category=\"Hài\" fetchUrl={requests.fetchComedyMovies} isOriginals={false} onClick={handleMovieClick} />\n          <MovieList category=\"Kinh dị\" fetchUrl={requests.fetchHorrorMovies} isOriginals={false} onClick={handleMovieClick} />\n          <MovieList category=\"Lãng mạn\" fetchUrl={requests.fetchRomanceMovies} isOriginals={false} onClick={handleMovieClick} />\n          <MovieList category=\"Tài liệu\" fetchUrl={requests.fetchDocumentaries} isOriginals={false} onClick={handleMovieClick} />\n        </>\n      )}\n\n    </div>\n  );\n}\n\nexport default Movie;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}