{"ast":null,"code":"var _jsxFileName = \"/Users/nus/Documents/Study/NU_Funix/React/ASM/Assignment 02 (Starter Code)/src/pages/MovieDetail/MovieDetails.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport { useParams } from 'react-router-dom'; // Import useParams to get movieId from URL\nimport styles from './movieDetails.module.css';\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\nconst opts = {\n  height: '400',\n  width: '100%',\n  playerVars: {\n    autoplay: 0\n  }\n};\nfunction MovieDetails() {\n  const {\n    movieId\n  } = useParams(); // Get the movieId from the URL\n  const [movie, setMovie] = useState(null); // Store the movie details\n  const [videoKey, setVideoKey] = useState(null); // Store the YouTube video key\n\n  useEffect(() => {\n    // Fetch movie details based on movieId\n    async function fetchMovieDetails() {\n      const response = await fetch(`${API_BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n      const data = await response.json();\n      setMovie(data);\n    }\n\n    // Fetch movie trailer or teaser\n    async function fetchMovieVideo() {\n      const response = await fetch(`${API_BASE_URL}/movie/${movieId}/videos?api_key=${API_KEY}`);\n      const data = await response.json();\n      const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n      const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n      setVideoKey(trailer ? trailer.key : teaser ? teaser.key : null);\n    }\n    fetchMovieDetails();\n    fetchMovieVideo();\n  }, [movieId]); // Re-run this effect when movieId changes\n\n  if (!movie) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 24\n    }\n  }, \"Loading...\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieDetails,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, movie.name || movie.title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 20\n    }\n  }, \"Release Date:\"), \" \", movie.release_date), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 20\n    }\n  }, \"Rating:\"), \" \", movie.vote_average), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, movie.overview)), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.movieTrailer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.videoContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, videoKey ? /*#__PURE__*/React.createElement(YouTube, {\n    videoId: videoKey,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(\"img\", {\n    src: `https://image.tmdb.org/t/p/original${movie.backdrop_path}`,\n    alt: movie.name,\n    className: styles.movieBackdrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }))));\n}\nexport default MovieDetails;","map":{"version":3,"names":["React","useState","useEffect","YouTube","useParams","styles","API_BASE_URL","API_KEY","opts","height","width","playerVars","autoplay","MovieDetails","movieId","movie","setMovie","videoKey","setVideoKey","fetchMovieDetails","response","fetch","data","json","fetchMovieVideo","trailer","results","find","video","site","type","teaser","key","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","movieDetails","movieContent","name","title","release_date","vote_average","overview","movieTrailer","videoContainer","videoId","src","backdrop_path","alt","movieBackdrop"],"sources":["/Users/nus/Documents/Study/NU_Funix/React/ASM/Assignment 02 (Starter Code)/src/pages/MovieDetail/MovieDetails.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport { useParams } from 'react-router-dom';  // Import useParams to get movieId from URL\nimport styles from './movieDetails.module.css';\n\n\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\n\nconst opts = {\n    height: '400',\n    width: '100%',\n    playerVars: {\n        autoplay: 0,\n    },\n};\n\nfunction MovieDetails() {\n    const { movieId } = useParams();  // Get the movieId from the URL\n    const [movie, setMovie] = useState(null);  // Store the movie details\n    const [videoKey, setVideoKey] = useState(null);  // Store the YouTube video key\n\n    useEffect(() => {\n        // Fetch movie details based on movieId\n        async function fetchMovieDetails() {\n            const response = await fetch(`${API_BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n            const data = await response.json();\n            setMovie(data);\n        }\n\n        // Fetch movie trailer or teaser\n        async function fetchMovieVideo() {\n            const response = await fetch(`${API_BASE_URL}/movie/${movieId}/videos?api_key=${API_KEY}`);\n            const data = await response.json();\n            const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n            const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n            setVideoKey(trailer ? trailer.key : teaser ? teaser.key : null);\n        }\n\n        fetchMovieDetails();\n        fetchMovieVideo();\n    }, [movieId]);  // Re-run this effect when movieId changes\n\n    if (!movie) return <div>Loading...</div>;\n\n    return (\n        <div className={styles.movieDetails}>\n            <div className={styles.movieContent}>\n                <h2>{movie.name || movie.title}</h2>\n                <p><strong>Release Date:</strong> {movie.release_date}</p>\n                <p><strong>Rating:</strong> {movie.vote_average}</p>\n                <p>{movie.overview}</p>\n            </div>\n\n            {/* Placeholder for the trailer */}\n            <div className={styles.movieTrailer}>\n                <div className={styles.videoContainer}>\n                    {videoKey ? (\n                        <YouTube videoId={videoKey} opts={opts} />\n                    ) : (\n                        <img\n                            src={`https://image.tmdb.org/t/p/original${movie.backdrop_path}`}\n                            alt={movie.name}\n                            className={styles.movieBackdrop}\n                        />\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MovieDetails;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}