{"version":3,"sources":["pages/search/resultList.module.css","pages/NavBar/NavBar.jsx","pages/MovieList/Movie.jsx","pages/Banner/Banner.jsx","pages/browse/Browse.jsx","pages/search/ResultList.jsx","pages/search/SearchForm.jsx","pages/search/Search.jsx","pages/MovieDetail/MovieDetails.jsx","App.js","serviceWorker.js","index.js","pages/MovieDetail/movieDetails.module.css","pages/Banner/banner.module.css","pages/NavBar/navBar.module.css","pages/MovieList/movie.module.css","pages/search/searchForm.module.css"],"names":["module","exports","NavBar","isScrolled","setIsScrolled","useState","useEffect","handleScroll","window","scrollY","addEventListener","removeEventListener","React","createElement","className","styles","navbar","black","transparent","Link","to","fill","aria-hidden","data-prefix","data-icon","role","xmlns","viewBox","d","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","fetchSearch","MovieList","_ref","category","fetchUrl","isOriginals","movies","setMovies","navigate","useNavigate","async","response","fetch","data","json","results","fetchData","group","movieContainer","map","movie","key","id","movieItem","netflixOriginals","otherGenres","onClick","handleMovieClick","movieId","state","mediaType","src","poster_path","backdrop_path","alt","name","movieImage","Movie","Banner","setMovie","randomMovie","Math","floor","random","length","banner","style","backgroundSize","backgroundImage","backgroundPosition","bannerContents","bannerTitle","bannerDescription","overview","substr","bannerButtons","bannerButton","bannerFadeBottom","Browse","ResultList","Fragment","resultsContainer","title","SearchForm","query","setQuery","searchForm","form","onSubmit","e","preventDefault","trim","console","log","error","inputContent","type","value","onChange","target","placeholder","searchIcon","buttonGroup","Search","opts","height","width","playerVars","autoplay","MovieDetails","_location$state","_location$state2","useParams","location","useLocation","videoKey","setVideoKey","sameGenreMovies","setSameGenreMovies","endpoint","genres","genreId","fetchSameGenreMovies","fetchMovieDetails","trailer","find","video","site","teaser","fetchMovieVideo","marginTop","sameGenreMovie","clickedMovieId","parseInt","movieDetails","movieContent","line","release_date","vote_average","movieTrailer","videoContainer","YouTube","videoId","movieBackdrop","App","BrowserRouter","Routes","Route","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,iBAAmB,qCAAqC,QAAU,4BAA4B,UAAY,gC,2KC4C7GC,MAzCf,WACI,MAAOC,EAAYC,GAAiBC,oBAAS,GAgBhD,OAdGC,oBAAU,KACN,MAAMC,EAAeA,KACdC,OAAOC,QAAQ,IACdL,GAAc,GACVA,GAAc,IAK1B,OAFAI,OAAOE,iBAAiB,SAAUH,GAE3B,KACHC,OAAOG,oBAAoB,SAAUJ,KAEtC,IAGTK,IAAAC,cAAA,OAAKC,UAAW,GAAGC,IAAOC,UAAUb,EAAaY,IAAOE,MAAQF,IAAOG,eACtEN,IAAAC,cAAA,OAAKC,UAAWC,IAAO,gBACVH,IAAAC,cAACM,IAAI,CAACC,GAAG,IAAIN,UAAWC,IAAO,iBAAiB,gBAEpDH,IAAAC,cAAA,OAAKC,UAAWC,IAAO,iBACnBH,IAAAC,cAACM,IAAI,CAACC,GAAG,UAAUN,UAAWC,IAAO,gBACjCH,IAAAC,cAAA,OACAQ,KAAK,OACLC,cAAY,OACZC,cAAY,MACZC,YAAU,SACVC,KAAK,MACLC,MAAM,6BACNC,QAAQ,eACRf,IAAAC,cAAA,QAAMe,EAAE,mW,gBC9B5B,MAGMC,EAAU,mCAEVC,EAAW,CACfC,cAAe,8BAA8BF,mBAC7CG,sBAAuB,wBAAwBH,qBAC/CI,cAAe,4BAA4BJ,mBAC3CK,kBAAmB,2BAA2BL,mBAC9CM,kBAAmB,2BAA2BN,mBAC9CO,kBAAmB,2BAA2BP,mBAC9CQ,mBAAoB,2BAA2BR,sBAC/CS,mBAAoB,2BAA2BT,mBAC/CU,YAAa,yBAAyBV,oBAIxC,SAASW,EAASC,GAAuC,IAAtC,SAAEC,EAAQ,SAAEC,EAAQ,YAAEC,GAAaH,EACpD,MAAOI,EAAQC,GAAazC,mBAAS,IAC/B0C,EAAWC,cAEjB1C,oBAAU,MACR2C,iBACE,MAAMC,QAAiBC,MAAM,+BAAkBR,GACzCS,QAAaF,EAASG,OAC5BP,EAAUM,EAAKE,SAGjBC,IACC,CAACZ,IAQJ,OACE/B,IAAAC,cAAA,OAAKC,UAAWC,IAAOyC,OACrB5C,IAAAC,cAAA,UAAK6B,GACL9B,IAAAC,cAAA,OAAKC,UAAWC,IAAO0C,gBACpBZ,EAAOa,IAAKC,GACX/C,IAAAC,cAAA,OACE+C,IAAKD,EAAME,GACX/C,UAAW,GAAGC,IAAO+C,aAAalB,EAAc7B,IAAOgD,iBAAmBhD,IAAOiD,cACjFC,QAASA,KAAMC,OAbCC,EAagBR,EAAME,QAX9Cd,EAAS,UAAUoB,EAAW,CAAEC,MAAO,CAAEC,UADvBzB,EAAc,KAAO,QACaF,cAF5ByB,QAgBhBvD,IAAAC,cAAA,OACEyD,IAAK,mCAAkC1B,EAAce,EAAMY,YAAcZ,EAAMa,eAC/EC,IAAKd,EAAMe,KACX5D,UAAWC,IAAO4D,iBAyBjBC,MAff,WACE,OACEhE,IAAAC,cAAA,WACED,IAAAC,cAAC2B,EAAS,CAACE,SAAS,GAAGC,SAAUb,EAASE,sBAAuBY,aAAa,IAC9EhC,IAAAC,cAAC2B,EAAS,CAACE,SAAS,qBAAWC,SAAUb,EAASC,cAAea,aAAa,IAC9EhC,IAAAC,cAAC2B,EAAS,CAACE,SAAS,yBAAeC,SAAUb,EAASG,cAAeW,aAAa,IAClFhC,IAAAC,cAAC2B,EAAS,CAACE,SAAS,yBAAYC,SAAUb,EAASI,kBAAmBU,aAAa,IACnFhC,IAAAC,cAAC2B,EAAS,CAACE,SAAS,SAAMC,SAAUb,EAASK,kBAAmBS,aAAa,IAC7EhC,IAAAC,cAAC2B,EAAS,CAACE,SAAS,eAAUC,SAAUb,EAASM,kBAAmBQ,aAAa,IACjFhC,IAAAC,cAAC2B,EAAS,CAACE,SAAS,mBAAWC,SAAUb,EAASO,mBAAoBO,aAAa,IACnFhC,IAAAC,cAAC2B,EAAS,CAACE,SAAS,mBAAWC,SAAUb,EAASQ,mBAAoBM,aAAa,M,gBC1EzF,MAKMd,EACqB,yEAsDZ+C,MAnDf,WACI,MAAOlB,EAAOmB,GAAYzE,mBAAS,IAWnC,OAVAC,oBAAU,MACN2C,iBACI,MAAMC,QAAiBC,MAAM,+BAAkBrB,GACzCsB,QAAaF,EAASG,OACtB0B,EAAc3B,EAAKE,QAAQ0B,KAAKC,MAAMD,KAAKE,SAAW9B,EAAKE,QAAQ6B,SACzEL,EAASC,GAEbxB,IACD,IAEEI,EAGD/C,IAAAC,cAAA,WAAKD,IAAAC,cAAA,UACDC,UAAWC,IAAOqE,OAClBC,MAAO,CACHC,eAAgB,QAChBC,gBAAiB,2CAAgD,OAAL5B,QAAK,IAALA,OAAK,EAALA,EAAOa,kBACnEgB,mBAAoB,kBAGxB5E,IAAAC,cAAA,OAAKC,UAAWC,IAAO0E,gBAEnB7E,IAAAC,cAAA,MAAIC,UAAWC,IAAO2E,aACjB/B,EAAMe,MAIX9D,IAAAC,cAAA,OAAKC,UAAWC,IAAO4E,oBACb,OAALhC,QAAK,IAALA,OAAK,EAALA,EAAOiC,WAAYjC,EAAMiC,SAAST,OAAS,IACtCxB,EAAMiC,SAASC,OAAO,EAAG,KAAO,MAChClC,EAAMiC,UAIhBhF,IAAAC,cAAA,OAAKC,UAAWC,IAAO+E,eACnBlF,IAAAC,cAAA,UAAQC,UAAWC,IAAOgF,cAAc,QACxCnF,IAAAC,cAAA,UAAQC,UAAWC,IAAOgF,cAAc,aAKhDnF,IAAAC,cAAA,OAAKC,UAAWC,IAAOiF,qBAhCZ,MCTRC,MAVf,WACC,OACCrF,IAAAC,cAAA,OAAKC,UAAU,OACdF,IAAAC,cAACX,EAAM,MACPU,IAAAC,cAACgE,EAAM,MACPjE,IAAAC,cAAC+D,EAAK,Q,iCCoBMsB,MA5Bf,SAAmBzD,GAAqC,IAApC,OAAEI,EAAS,GAAE,iBAAEqB,GAAkBzB,EACjD,OACI7B,IAAAC,cAAAD,IAAAuF,SAAA,KACIvF,IAAAC,cAAA,UAAI,iBACJD,IAAAC,cAAA,OAAKC,UAAWC,IAAOqF,kBAClBvD,EAAOsC,OAAS,EACbvE,IAAAC,cAAA,OAAKC,UAAWC,IAAOuC,SAClBT,EAAOa,IAAIC,GACR/C,IAAAC,cAAA,OACI+C,IAAKD,EAAME,GACX/C,UAAWC,IAAO+C,UAClBG,QAASA,IAAMC,EAAiBP,EAAME,KAEtCjD,IAAAC,cAAA,OACIyD,IAAK,kCAAkCX,EAAMY,YAC7CE,IAAKd,EAAM0C,OAAS1C,EAAMe,UAO1C9D,IAAAC,cAAA,SAAG,uBC8CRyF,MA7Df,WACI,MAAOC,EAAOC,GAAYnG,mBAAS,KAC5BwC,EAAQC,GAAazC,mBAAS,IAC/B0C,EAAWC,cA0BjB,OACIpC,IAAAC,cAAA,OAAKC,UAAWC,IAAO0F,YACnB7F,IAAAC,cAAA,QAAMC,UAAWC,IAAO2F,KAAMC,SAzBjB1D,UAEjB,GADA2D,EAAEC,iBACGN,EAAMO,OAIX,IACI,MAAM5D,QAAiBC,MAAM,wGAAqEoD,GAC5FnD,QAAaF,EAASG,OAC5BP,EAAUM,EAAKE,SAAW,IAC1ByD,QAAQC,IAAInE,GACd,MAAOoE,GACLF,QAAQE,MAAM,iCAAkCA,GAChDnE,EAAU,OAaNlC,IAAAC,cAAA,OAAKC,UAAWC,IAAOmG,cACnBtG,IAAAC,cAAA,SACIsG,KAAK,OACLC,MAAOb,EACPc,SAAWT,GAAMJ,EAASI,EAAEU,OAAOF,OACnCG,YAAY,0BAChB3G,IAAAC,cAAA,OAAKC,UAAWC,IAAOyG,WACnBnG,KAAK,OACLC,cAAY,OACZC,cAAY,MACZC,YAAU,SACVC,KAAK,MACLC,MAAM,6BACNC,QAAQ,eACRf,IAAAC,cAAA,QAAMe,EAAE,gWAGhBhB,IAAAC,cAAA,OAAKC,UAAWC,IAAO0G,aACnB7G,IAAAC,cAAA,UAAQsG,KAAK,QAAQlD,QAASA,IAAMuC,EAAS,KAAM,SACnD5F,IAAAC,cAAA,UAAQsG,KAAK,UAAS,YAK9BvG,IAAAC,cAACqF,EAAU,CAACrD,OAAQA,EAAQqB,iBAhCVC,IACtBpB,EAAS,UAAUoB,QCtBZuD,MATAA,IAEb9G,IAAAC,cAAA,OAAKC,UAAU,OACdF,IAAAC,cAACX,EAAM,MACPU,IAAAC,cAACyF,EAAU,O,wBCDd,MAGMqB,EAAO,CACTC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACRC,SAAU,IA8HHC,MA1Hf,WAAyB,IAADC,EAAAC,EACpB,MAAM,QAAE/D,GAAYgE,cACdC,EAAWC,cACX3F,GAAyB,QAAduF,EAAAG,EAAShE,aAAK,IAAA6D,OAAA,EAAdA,EAAgBvF,WAAY,GACvC2B,GAA0B,QAAd6D,EAAAE,EAAShE,aAAK,IAAA8D,OAAA,EAAdA,EAAgB7D,YAAa,QACzCtB,EAAWC,eACVW,EAAOmB,GAAYzE,mBAAS,OAC5BiI,EAAUC,GAAelI,mBAAS,OAClCmI,EAAiBC,GAAsBpI,mBAAS,IA8DvD,OA5DAC,oBAAU,MAEN2C,iBACI,IAEI,MAAMyF,EAAyB,OAAdrE,EAAqB,OAAOF,EAAY,UAAUA,EAC7DjB,QAAiBC,MAAM,+BAAkBuF,6DACzCtF,QAAaF,EAASG,OAI5B,GAHAyB,EAAS1B,GAGLA,EAAKuF,QAAUvF,EAAKuF,OAAOxD,OAAS,EAAG,EAqBnDlC,eAAoC2F,GAChC,IACI,MAAMF,EAAyB,OAAdrE,EACX,qEAA+CuE,qBAC/C,wEAAkDA,EAClD1F,QAAiBC,MAAM,+BAAkBuF,GACzCtF,QAAaF,EAASG,OAC5BoF,EAAmBrF,EAAKE,SAC1B,MAAO2D,GACLF,QAAQE,MAAM,6CAA8CA,IA5BxD4B,CADgBzF,EAAKuF,OAAO,GAAG9E,KAGrC,MAAOoD,GACLF,QAAQE,MAAM,wCAAyCA,IA6B/D6B,GAvBA7F,iBACI,MAAMyF,EAAyB,OAAdrE,EAAqB,OAAOF,EAAY,UAAUA,EAC7DjB,QAAiBC,MAAM,+BAAkBuF,qDACzCtF,QAAaF,EAASG,OACtB0F,EAAU3F,EAAKE,QAAQ0F,KAAKC,GAAwB,YAAfA,EAAMC,MAAqC,YAAfD,EAAM9B,MACvEgC,EAAS/F,EAAKE,QAAQ0F,KAAKC,GAAwB,YAAfA,EAAMC,MAAqC,WAAfD,EAAM9B,MAC5EoB,EAAYQ,EAAUA,EAAQnF,IAAMuF,EAASA,EAAOvF,IAAM,MAkB9DwF,IACD,CAACjF,EAASE,IAaRV,EAGD/C,IAAAC,cAAA,WACID,IAAAC,cAACX,EAAM,MACPU,IAAAC,cAAA,OAAKwE,MAAO,CAAEgE,UAAW,UAEzBzI,IAAAC,cAAA,OAAKC,UAAWC,IAAOyC,OACnB5C,IAAAC,cAAA,UAAK6B,GACL9B,IAAAC,cAAA,OAAKC,UAAWC,IAAO0C,gBAClB+E,EAAgB9E,IAAI4F,GACjB1I,IAAAC,cAAA,OAAK+C,IAAK0F,EAAezF,GAAI/C,UAAWC,IAAO+C,UAC3CG,QAASA,KAtBPsF,SAsB8BD,EAAezF,MArB5C2F,SAASrF,GAE5BpB,EAAS,KAGTA,EAAS,UAAUwG,EAAkB,CAAEnF,MAAO,CAAE1B,WAAU2B,iBAkB1CzD,IAAAC,cAAA,OACIyD,IAAK,kCAAkCgF,EAAe9E,cACtDC,IAAK6E,EAAejD,OAASiD,EAAe5E,WAOhE9D,IAAAC,cAAA,OAAKC,UAAWC,IAAO0I,cACnB7I,IAAAC,cAAA,OAAKC,UAAWC,IAAO2I,cACnB9I,IAAAC,cAAA,UAAK8C,EAAMe,MAAQf,EAAM0C,OACzBzF,IAAAC,cAAA,MAAIC,UAAWC,IAAO4I,OACtB/I,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,iBAAsB,IAAE8C,EAAMiG,cACzChJ,IAAAC,cAAA,SAAGD,IAAAC,cAAA,cAAQ,WAAgB,IAAE8C,EAAMkG,cACnCjJ,IAAAC,cAAA,SAAI8C,EAAMiC,WAIdhF,IAAAC,cAAA,OAAKC,UAAWC,IAAO+I,cACnBlJ,IAAAC,cAAA,OAAKC,UAAWC,IAAOgJ,gBAClBzB,EACG1H,IAAAC,cAACmJ,IAAO,CAACC,QAAS3B,EAAUX,KAAMA,IAElC/G,IAAAC,cAAA,OACIyD,IAAK,sCAAsCX,EAAMa,cACjDC,IAAKd,EAAMe,KACX5D,UAAWC,IAAOmJ,oBAzC3BtJ,IAAAC,cAAA,WAAK,eChEbsJ,MAZf,WACC,OACCvJ,IAAAC,cAACuJ,IAAa,KACbxJ,IAAAC,cAACwJ,IAAM,KACNzJ,IAAAC,cAACyJ,IAAK,CAACC,KAAK,IAAIC,QAAS5J,IAAAC,cAACoF,EAAM,QAChCrF,IAAAC,cAACyJ,IAAK,CAACC,KAAK,UAAUC,QAAS5J,IAAAC,cAAC6G,EAAM,QACtC9G,IAAAC,cAACyJ,IAAK,CAACC,KAAK,kBAAkBC,QAAS5J,IAAAC,cAACmH,EAAY,WCNxD,MAAMyC,EAAcC,QACU,cAA7BlK,OAAO4H,SAASuC,UAEc,UAA7BnK,OAAO4H,SAASuC,UAEhBnK,OAAO4H,SAASuC,SAASC,MACxB,2DAsCH,SAASC,EAAgBC,EAAOC,GAC/BC,UAAUC,cACRC,SAASJ,GACTK,KAAMC,IACNA,EAAaC,cAAgB,KAC5B,MAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,KACD,cAA3BF,EAAiBlH,QAChB4G,UAAUC,cAAcQ,YAI3B1E,QAAQC,IACP,iHAKG+D,GAAUA,EAAOW,UACpBX,EAAOW,SAASN,KAMjBrE,QAAQC,IAAI,sCAGR+D,GAAUA,EAAOY,WACpBZ,EAAOY,UAAUP,UAOtBQ,MAAO3E,IACPF,QAAQE,MAAM,4CAA6CA,KC1F9D4E,IAASC,OACRlL,IAAAC,cAACsJ,EAAG,MACJ4B,SAASC,eAAe,SDclB,SAAkBjB,GACxB,GAA6C,kBAAmBC,UAAW,CAG1E,GADkB,IAAIiB,IAAIC,gBAAwB1L,OAAO4H,SAAS+D,MACpDC,SAAW5L,OAAO4H,SAASgE,OAIxC,OAGD5L,OAAOE,iBAAiB,OAAQ,KAC/B,MAAMoK,EAAQ,kCAEVL,IAgEP,SAAiCK,EAAOC,GAEvC5H,MAAM2H,EAAO,CACZuB,QAAS,CAAE,iBAAkB,YAE5BlB,KAAMjI,IAEN,MAAMoJ,EAAcpJ,EAASmJ,QAAQE,IAAI,gBAEpB,MAApBrJ,EAASsJ,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAMvB,KAAMC,IACnCA,EAAauB,aAAaxB,KAAK,KAC9B3K,OAAO4H,SAASwE,aAKlB/B,EAAgBC,EAAOC,KAGxBa,MAAM,KACN7E,QAAQC,IACP,mEAvFA6F,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAMvB,KAAK,KAClCpE,QAAQC,IACP,gHAMF6D,EAAgBC,EAAOC,MCpC3BE,I,kBCbAjL,EAAOC,QAAU,CAAC,aAAe,mCAAmC,aAAe,mCAAmC,aAAe,mCAAmC,GAAK,yBAAyB,eAAiB,qCAAqC,cAAgB,oCAAoC,MAAQ,4BAA4B,eAAiB,qCAAqC,UAAY,gCAAgC,WAAa,mC,kBCAncD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,eAAiB,+BAA+B,YAAc,4BAA4B,cAAgB,8BAA8B,aAAe,6BAA6B,kBAAoB,kCAAkC,iBAAmB,mC,kBCA/SD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,4BAA4B,MAAQ,sBAAsB,cAAc,4BAA4B,eAAe,6BAA6B,eAAe,6BAA6B,cAAc,8B,kBCA1QD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,eAAiB,8BAA8B,UAAY,yBAAyB,WAAa,0BAA0B,iBAAmB,gCAAgC,YAAc,6B,kBCA3OD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,KAAO,yBAAyB,aAAe,iCAAiC,WAAa,+BAA+B,YAAc,mC","file":"static/js/main.b9923ed6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsContainer\":\"resultList_resultsContainer__3KiyV\",\"results\":\"resultList_results__2pDrk\",\"movieItem\":\"resultList_movieItem__370Vz\"};","import React, { useEffect, useState } from 'react';\nimport styles from './navBar.module.css';\nimport { Link } from 'react-router-dom';\n\nfunction NavBar() {\n    const [isScrolled, setIsScrolled] = useState(false);\n\n    useEffect(()=>{\n        const handleScroll = () => {\n            if(window.scrollY>100) {\n                setIsScrolled(true)\n            } else {setIsScrolled(false)}\n        }\n        // Attach scroll listener\n        window.addEventListener('scroll', handleScroll)\n\n        return () => {\n            window.removeEventListener('scroll', handleScroll); // Cleanup the listener on component unmount\n          };\n        }, []);\n    \n\treturn (\n\t\t<div className={`${styles.navbar} ${isScrolled ? styles.black : styles.transparent}`}>\n\t\t\t<div className={styles['navbar-left']}>\n                <Link to='/' className={styles['navbar-brand']}> Movie App </Link>\n            </div>\n            <div className={styles['navbar-right']}>\n                <Link to='/search' className={styles['search-icon']}>\n                    <svg\n                    fill='#ccc'             \n                    aria-hidden='true'\n                    data-prefix='fas'\n                    data-icon='search'\n                    role='img'\n                    xmlns='http://www.w3.org/2000/svg'\n                    viewBox='0 0 512 512'>\n                    <path d='M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z'></path>\n                    </svg>\n                   \n                </Link>\n            </div>\n\t\t</div>\n\t);\n}\n\nexport default NavBar;\n\n","\nimport React, { useState, useEffect } from 'react';\nimport styles from './movie.module.css';\nimport { useNavigate } from 'react-router-dom';  // Import useNavigate\n\n// Base URL for all API requests\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\n\n// API key\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n  fetchSearch: `/search/movie?api_key=${API_KEY}&language=en-US`,\n};\n\n// Create component MovieList\nfunction MovieList({ category, fetchUrl, isOriginals }) {\n  const [movies, setMovies] = useState([]);\n  const navigate = useNavigate();  // Initialize useNavigate for navigation\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(`${API_BASE_URL}${fetchUrl}`);\n      const data = await response.json();\n      setMovies(data.results);\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n\n  // Function to handle movie click and navigate to the details page\n  const handleMovieClick = (movieId) => {\n    const mediaType = isOriginals ? 'tv' : 'movie';  // If Netflix Originals, it's a TV show\n    navigate(`/movie/${movieId}`, { state: { mediaType, category } });  // Navigate to the movie details page with movieId and Pass category in state\n  };\n\n  return (\n    <div className={styles.group}>\n      <h2>{category}</h2>\n      <div className={styles.movieContainer}>\n        {movies.map((movie) => (\n          <div\n            key={movie.id}\n            className={`${styles.movieItem} ${isOriginals ? styles.netflixOriginals : styles.otherGenres}`}\n            onClick={() => handleMovieClick(movie.id)}  // Navigate on click\n          >\n            {/* Conditional rendering: show poster for Netflix Originals, backdrop for other genres */}\n            <img\n              src={`https://image.tmdb.org/t/p/w500${isOriginals ? movie.poster_path : movie.backdrop_path}`}\n              alt={movie.name}\n              className={styles.movieImage}\n            />\n\n          </div>\n        ))}\n      </div>\n    </div >\n  );\n}\n\nfunction Movie() {\n  return (\n    <div>\n      <MovieList category=\"\" fetchUrl={requests.fetchNetflixOriginals} isOriginals={true} />\n      <MovieList category=\"Xu hướng\" fetchUrl={requests.fetchTrending} isOriginals={false} />\n      <MovieList category=\"Xếp hạng cao\" fetchUrl={requests.fetchTopRated} isOriginals={false} />\n      <MovieList category=\"Hành động\" fetchUrl={requests.fetchActionMovies} isOriginals={false} />\n      <MovieList category=\"Hài\" fetchUrl={requests.fetchComedyMovies} isOriginals={false} />\n      <MovieList category=\"Kinh dị\" fetchUrl={requests.fetchHorrorMovies} isOriginals={false} />\n      <MovieList category=\"Lãng mạn\" fetchUrl={requests.fetchRomanceMovies} isOriginals={false} />\n      <MovieList category=\"Tài liệu\" fetchUrl={requests.fetchDocumentaries} isOriginals={false} />\n    </div>\n  );\n}\n\nexport default Movie;\n\n","import React, { useState, useEffect } from 'react';\nimport styles from './banner.module.css';\n\n// Base URL for all API requests\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\n\n// API key\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\n\nconst requests = {\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\n};\n\nfunction Banner() {\n    const [movie, setMovie] = useState([])\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch(`${API_BASE_URL}${requests.fetchNetflixOriginals}`);\n            const data = await response.json();\n            const randomMovie = data.results[Math.floor(Math.random() * data.results.length)]\n            setMovie(randomMovie)\n        }\n        fetchData();\n    }, []);\n\n    if (!movie) return null; // Prevent rendering if movie is not yet set\n\n    return (\n        <div><header\n            className={styles.banner}\n            style={{\n                backgroundSize: 'cover',\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\n                backgroundPosition: 'center center',\n            }}\n        >\n            <div className={styles.bannerContents}>\n                {/* Title */}\n                <h1 className={styles.bannerTitle}>\n                    {movie.name}\n                </h1>\n\n                {/* Movie Description */}\n                <div className={styles.bannerDescription}>\n                    {movie?.overview && movie.overview.length > 150\n                        ? movie.overview.substr(0, 150) + '...'\n                        : movie.overview}\n                </div>\n\n                {/* Buttons (if you want to add them) */}\n                <div className={styles.bannerButtons}>\n                    <button className={styles.bannerButton}>Play</button>\n                    <button className={styles.bannerButton}>My List</button>\n                </div>\n            </div>\n\n            {/* Optional Fade at the bottom */}\n            <div className={styles.bannerFadeBottom} />\n        </header></div>\n    )\n};\n\n\n\nexport default Banner;\n\n\n","import React from 'react';\nimport NavBar from '../NavBar/NavBar';\nimport Movie from '../MovieList/Movie';\nimport Banner from '../Banner/Banner'\n\n\nfunction Browse() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<NavBar />\n\t\t\t<Banner />\n\t\t\t<Movie />\n\t\t</div>\n\t);\n}\n\nexport default Browse;\n\n","import React from 'react';\nimport styles from './resultList.module.css'\n\nfunction ResultList({ movies = [], handleMovieClick }) {\n    return (\n        <>\n            <h1>Search Result</h1>\n            <div className={styles.resultsContainer}>\n                {movies.length > 0 ? (\n                    <div className={styles.results}>\n                        {movies.map(movie => (\n                            <div\n                                key={movie.id}\n                                className={styles.movieItem}\n                                onClick={() => handleMovieClick(movie.id)}\n                            >\n                                <img\n                                    src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n                                    alt={movie.title || movie.name}\n                                />\n\n                            </div>\n                        ))}\n                    </div>\n                ) : (\n                    <p>No results found</p>\n                )}\n            </div>\n        </>)\n}\n\nexport default ResultList\n\n","import React, { useState } from 'react';\nimport styles from './searchForm.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport ResultList from './ResultList';\n\n\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\n\nfunction SearchForm() {\n    const [query, setQuery] = useState('');\n    const [movies, setMovies] = useState([]);\n    const navigate = useNavigate()\n\n    // Function to handle form submission\n    const handleSearch = async (e) => {\n        e.preventDefault();\n        if (!query.trim()) return;\n\n\n        // Fetch movies from the API\n        try {\n            const response = await fetch(`${API_BASE_URL}/search/movie?api_key=${API_KEY}&language=en&query=${query}`);\n            const data = await response.json();\n            setMovies(data.results || [])\n            console.log(movies)\n        } catch (error) {\n            console.error('Error fetching search results:', error);\n            setMovies([]);  // In case of error, reset movies to an empty array\n        }\n    }\n\n    // Function to handle clicking on a movie poster\n    const handleMovieClick = (movieId) => {\n        navigate(`/movie/${movieId}`);  // Navigate to the movie details page with movieId\n    };\n\n\n    return (\n        <div className={styles.searchForm}>\n            <form className={styles.form} onSubmit={handleSearch}>\n                <div className={styles.inputContent}>\n                    <input\n                        type='text'\n                        value={query}\n                        onChange={(e) => setQuery(e.target.value)} // Update query state with input value\n                        placeholder='Search for a movie...' />\n                    <svg className={styles.searchIcon}\n                        fill='#ccc'\n                        aria-hidden='true'\n                        data-prefix='fas'\n                        data-icon='search'\n                        role='img'\n                        xmlns='http://www.w3.org/2000/svg'\n                        viewBox='0 0 512 512'>\n                        <path d='M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z'></path>\n                    </svg>\n                </div>\n                <div className={styles.buttonGroup}>\n                    <button type='reset' onClick={() => setQuery('')} >RESET</button>\n                    <button type='submit'>SEARCH</button>\n                </div>\n            </form>\n\n            {/* Pass movies and handleMovieClick to ResultList */}\n            <ResultList movies={movies} handleMovieClick={handleMovieClick} />\n        </div>\n    )\n}\n\nexport default SearchForm\n","import React from 'react';\nimport NavBar from '../NavBar/NavBar';\nimport SearchForm from './SearchForm';\n\nconst Search = () => {\n\treturn (\n\t\t<div className='app'>\n\t\t\t<NavBar />\n\t\t\t<SearchForm />\n\t\t</div>\n\t)\n};\n\nexport default Search;\n","import React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';  // Import useParams to get movieId from URL and useLocation to retrieve the category from the state object\nimport styles from './movieDetails.module.css';\nimport NavBar from '../NavBar/NavBar';\n\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a090b75e1744dd94d481ba67ad26903e';\n\nconst opts = {\n    height: '400',\n    width: '100%',\n    playerVars: {\n        autoplay: 0,\n    },\n};\n\nfunction MovieDetails() {\n    const { movieId } = useParams();  // Get the movieId from the URL\n    const location = useLocation();  // Get location object\n    const category = location.state?.category || '';\n    const mediaType = location.state?.mediaType || 'movie' // Get mediaType from state, default to 'movie'\n    const navigate = useNavigate()\n    const [movie, setMovie] = useState(null);  // Store the movie details\n    const [videoKey, setVideoKey] = useState(null);  // Store the YouTube video key\n    const [sameGenreMovies, setSameGenreMovies] = useState([]);  // Movies from the same genre\n\n    useEffect(() => {\n        // Fetch movie details based on movieId\n        async function fetchMovieDetails() {\n            try {\n                // Use the correct endpoint based on media type\n                const endpoint = mediaType === 'tv' ? `/tv/${movieId}` : `/movie/${movieId}`;\n                const response = await fetch(`${API_BASE_URL}${endpoint}?api_key=${API_KEY}&language=en-US`);\n                const data = await response.json();\n                setMovie(data);\n\n                // Fetch movies from the same genre after getting movie details\n                if (data.genres && data.genres.length > 0) {\n                    const genreId = data.genres[0].id;  // Use the first genre ID\n                    fetchSameGenreMovies(genreId);\n                }\n            } catch (error) {\n                console.error('Error fetching movie/TV show details:', error);\n            }\n        }\n\n\n        // Fetch movie trailer or teaser\n        async function fetchMovieVideo() {\n            const endpoint = mediaType === 'tv' ? `/tv/${movieId}` : `/movie/${movieId}`;\n            const response = await fetch(`${API_BASE_URL}${endpoint}/videos?api_key=${API_KEY}`);\n            const data = await response.json();\n            const trailer = data.results.find(video => video.site === 'YouTube' && video.type === 'Trailer');\n            const teaser = data.results.find(video => video.site === 'YouTube' && video.type === 'Teaser');\n            setVideoKey(trailer ? trailer.key : teaser ? teaser.key : null);\n        }\n\n        // Fetch movies with the same genre\n        async function fetchSameGenreMovies(genreId) {\n            try {\n                const endpoint = mediaType === 'tv'\n                    ? `/discover/tv?api_key=${API_KEY}&with_genres=${genreId}&with_network=123`  // Netflix Originals by genre\n                    : `/discover/movie?api_key=${API_KEY}&with_genres=${genreId}`;  // Use the correct endpoint based on mediaType\n                const response = await fetch(`${API_BASE_URL}${endpoint}`);\n                const data = await response.json();\n                setSameGenreMovies(data.results);\n            } catch (error) {\n                console.error('Error fetching same genre movies/TV shows:', error);\n            }\n        }\n\n        fetchMovieDetails();\n        fetchMovieVideo();\n    }, [movieId, mediaType]);  // Re-run this effect when movieId &mediaType change\n\n    // Function to handle movie click from same genre movies\n    const handleMovieClick = (clickedMovieId) => {\n        if (clickedMovieId === parseInt(movieId)) {\n            // If the same movie is clicked, navigate back to the browse page\n            navigate('/');\n        } else {\n            // If a different movie is clicked, navigate to the new movie detail page\n            navigate(`/movie/${clickedMovieId}`, { state: { category, mediaType } });\n        }\n    };\n\n    if (!movie) return <div>Loading...</div>;\n\n    return (\n        <div>\n            <NavBar />\n            <div style={{ marginTop: '50px' }}></div>\n            {/* Same Genre Movies */}\n            <div className={styles.group}>\n                <h2>{category}</h2>\n                <div className={styles.movieContainer}>\n                    {sameGenreMovies.map(sameGenreMovie => (\n                        <div key={sameGenreMovie.id} className={styles.movieItem}\n                            onClick={() => handleMovieClick(sameGenreMovie.id)}>\n                            {/* Handle movie click */}\n                            <img\n                                src={`https://image.tmdb.org/t/p/w200${sameGenreMovie.backdrop_path}`}\n                                alt={sameGenreMovie.title || sameGenreMovie.name}\n                            />\n                        </div>\n                    ))}\n                </div>\n            </div>\n\n            <div className={styles.movieDetails}>\n                <div className={styles.movieContent}>\n                    <h2>{movie.name || movie.title}</h2>\n                    <hr className={styles.line} />\n                    <p><strong>Release Date:</strong> {movie.release_date}</p>\n                    <p><strong>Rating:</strong> {movie.vote_average}</p>\n                    <p>{movie.overview}</p>\n                </div>\n\n                {/* Placeholder for the trailer */}\n                <div className={styles.movieTrailer}>\n                    <div className={styles.videoContainer}>\n                        {videoKey ? (\n                            <YouTube videoId={videoKey} opts={opts} />\n                        ) : (\n                            <img\n                                src={`https://image.tmdb.org/t/p/original${movie.backdrop_path}`}\n                                alt={movie.name}\n                                className={styles.movieBackdrop}\n                            />\n                        )}\n                    </div>\n                </div>\n\n            </div>\n        </div >\n    );\n}\n\nexport default MovieDetails;\n\n","import React from 'react';\nimport {\n\tBrowserRouter,\n\tRoutes,\n\tRoute,\n} from \"react-router-dom\";\n\nimport Browse from './pages/browse/Browse';\nimport Search from './pages/search/Search';\nimport MovieDetails from './pages/MovieDetail/MovieDetails';\n\n\nfunction App() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"/\" element={<Browse />} />\n\t\t\t\t<Route path=\"/search\" element={<Search />} />\n\t\t\t\t<Route path=\"/movie/:movieId\" element={<MovieDetails />} />\n\t\t\t</Routes>\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movieDetails\":\"movieDetails_movieDetails__36QED\",\"movieContent\":\"movieDetails_movieContent__2hubY\",\"movieTrailer\":\"movieDetails_movieTrailer__mVzm8\",\"hr\":\"movieDetails_hr__2leNT\",\"videoContainer\":\"movieDetails_videoContainer__1eDE1\",\"movieBackdrop\":\"movieDetails_movieBackdrop__2kUFm\",\"group\":\"movieDetails_group__pr2oU\",\"movieContainer\":\"movieDetails_movieContainer__3Rz_T\",\"movieItem\":\"movieDetails_movieItem__1b_Bo\",\"movieImage\":\"movieDetails_movieImage__1BU4F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"banner_banner__1mlTE\",\"bannerContents\":\"banner_bannerContents__3BtVY\",\"bannerTitle\":\"banner_bannerTitle__2URfH\",\"bannerButtons\":\"banner_bannerButtons__R28vh\",\"bannerButton\":\"banner_bannerButton__1GdjZ\",\"bannerDescription\":\"banner_bannerDescription__2lhI8\",\"bannerFadeBottom\":\"banner_bannerFadeBottom__2wYKW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"navBar_navbar__2UHsn\",\"transparent\":\"navBar_transparent__lzkzr\",\"black\":\"navBar_black__cx66L\",\"navbar-left\":\"navBar_navbar-left__1p1QS\",\"navbar-right\":\"navBar_navbar-right__3CgN_\",\"navbar-brand\":\"navBar_navbar-brand__3rqe3\",\"search-icon\":\"navBar_search-icon__3RXMh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"movie_group__1YL8_\",\"movieContainer\":\"movie_movieContainer__3d8AB\",\"movieItem\":\"movie_movieItem__13poJ\",\"movieImage\":\"movie_movieImage__xhZZv\",\"netflixOriginals\":\"movie_netflixOriginals__3lbLa\",\"otherGenres\":\"movie_otherGenres__14NMl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchForm\":\"searchForm_searchForm__3JZhO\",\"form\":\"searchForm_form__20IJK\",\"inputContent\":\"searchForm_inputContent__taglc\",\"searchIcon\":\"searchForm_searchIcon__26cZK\",\"buttonGroup\":\"searchForm_buttonGroup__1R-a0\"};"],"sourceRoot":""}